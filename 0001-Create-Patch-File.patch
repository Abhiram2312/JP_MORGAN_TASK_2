From 63f5a760fed7e3e5aca86e94375cfe46b9615f16 Mon Sep 17 00:00:00 2001
From: Abhiram Sarma <abhiramsarmabollavaram@gmail.com>
Date: Thu, 21 Sep 2023 12:12:27 +0530
Subject: [PATCH] Create Patch File

---
 package-lock.json |  2 +-
 package.json      |  2 +-
 src/App.tsx       | 35 +++++++++++++++++++++++++----------
 src/Graph.tsx     | 30 +++++++++++++++++-------------
 4 files changed, 44 insertions(+), 25 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 21b4315..f5728d2 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -20,7 +20,7 @@
         "puppeteer": "^1.19.0",
         "react": "^16.9.0",
         "react-dom": "^16.9.0",
-        "react-scripts": "2.1.3"
+        "react-scripts": "^2.1.3"
       },
       "devDependencies": {
         "awesome-typescript-loader": "^5.2.1",
diff --git a/package.json b/package.json
index ca234e9..5cf500d 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "puppeteer": "^1.19.0",
     "react": "^16.9.0",
     "react-dom": "^16.9.0",
-    "react-scripts": "2.1.3"
+    "react-scripts": "^2.1.3"
   },
   "scripts": {
     "start": "react-scripts --openssl-legacy-provider start",
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..1dd05c6 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,14 +2,15 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
-
+ 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
-
+ 
 /**
  * The parent element of the react app.
  * It renders title, button and Graph react element.
@@ -17,32 +18,46 @@ interface IState {
 class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
-
+ 
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
-
+ 
   /**
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
-
+ 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x=0;
+    const interval =setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({
+        data: serverResponds,
+        showGraph: true,
+ 
     });
+  });
+  x++;
+  if (x>1000){
+    clearInterval(interval);
   }
-
+},100);
+  }
+ 
   /**
    * Render the App react component
    */
@@ -70,5 +85,5 @@ class App extends Component<{}, IState> {
     )
   }
 }
-
-export default App;
+ 
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..26ddfe1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -2,22 +2,22 @@ import React, { Component } from 'react';
 import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
-
+ 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
   data: ServerRespond[],
 }
-
+ 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
-
+ 
 /**
  * React component that renders Perspective based on data
  * parsed from its parent through data property.
@@ -25,33 +25,37 @@ interface PerspectiveViewerElement {
 class Graph extends Component<IProps, {}> {
   // Perspective table
   table: Table | undefined;
-
+ 
   render() {
     return React.createElement('perspective-viewer');
   }
-
+ 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
       top_bid_price: 'float',
       timestamp: 'date',
     };
-
+ 
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+ 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
-
+ 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
@@ -69,5 +73,5 @@ class Graph extends Component<IProps, {}> {
     }
   }
 }
-
-export default Graph;
+ 
+export default Graph;
\ No newline at end of file
-- 
2.42.0.windows.2

